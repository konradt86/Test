Jeśli chcesz zainicjować sesję przeglądarki przez Selenium i potem sprawdzić, czy została ona pomyślnie otwarta, a jeśli nie, spróbować ponownie, możesz skorzystać z poniższego podejścia w Pythonie. Wykorzystuje ono wyjątki Selenium do obsługi przypadków, gdy przeglądarka nie została otwarta poprawnie, i próbuje ponownie zainicjować sesję w takim przypadku.

Zakładając, że masz już zainstalowane Selenium i sterownik dla przeglądarki, możesz zrobić coś takiego:

```python
from selenium import webdriver
from selenium.common.exceptions import WebDriverException
from webdriver_manager.chrome import ChromeDriverManager
import time

def get_driver(attempts=3):
    for attempt in range(attempts):
        try:
            # Próba utworzenia nowej sesji przeglądarki
            driver = webdriver.Chrome(ChromeDriverManager().install())
            print("Sesja przeglądarki została pomyślnie utworzona.")
            return driver
        except WebDriverException as e:
            print(f"Nie udało się utworzyć sesji przeglądarki: {e}")
            print(f"Próba {attempt + 1} z {attempts}. Ponowne próbowanie...")
            time.sleep(5)  # Odczekaj chwilę przed kolejną próbą
    print("Nie udało się utworzyć sesji przeglądarki po wielokrotnych próbach.")
    return None

# Użyj tej funkcji do inicjowania sesji przeglądarki
driver = get_driver()

if driver is not None:
    # Możesz teraz używać 'driver' do manipulowania przeglądarką
    driver.get("https://www.google.com")
    # Pamiętaj, aby zamknąć sesję po zakończeniu
    driver.quit()
```

Ten skrypt próbuje utworzyć sesję przeglądarki maksymalnie trzy razy (możesz dostosować tę liczbę do swoich potrzeb). Jeśli inicjacja się nie powiedzie (na przykład z powodu problemów z sterownikiem), skrypt odczeka 5 sekund przed ponowieniem próby. Dzięki temu masz pewność, że skrypt nie zakończy się niepowodzeniem od razu z powodu przejściowych problemów z uruchomieniem sterownika przeglądarki.

Pamiętaj, że używanie takiego podejścia może być przydatne w scenariuszach testowych lub podczas rozwijania oprogramowania, ale należy być ostrożnym przy stosowaniu go w środowiskach produkcyjnych, gdzie nieprzewidywalne opóźnienia i problemy z uruchamianiem przeglądarki mogą wskazywać na inne, bardziej złożone problemy systemowe.


Aby stworzyć skrypt Pythona, który używa Selenium do otwierania przeglądarki Edge, musisz najpierw upewnić się, że masz zainstalowane odpowiednie narzędzia i sterowniki. Oto kroki, które należy wykonać:

1. **Instalacja Selenium:** Użyj polecenia `pip install selenium` w terminalu lub cmd, aby zainstalować bibliotekę Selenium.
2. **Pobranie sterownika Edge:** Musisz pobrać odpowiedni sterownik dla przeglądarki Edge (Microsoft Edge Driver) zgodny z wersją przeglądarki, której używasz. Możesz go znaleźć na oficjalnej stronie Microsoftu.
3. **Konfiguracja ścieżki do sterownika:** Po pobraniu sterownika umieść go w łatwo dostępnym katalogu lub dodaj katalog, w którym się znajduje, do zmiennej środowiskowej PATH.

Poniżej znajduje się przykładowy skrypt, który otwiera przeglądarkę Edge za pomocą Selenium:

```python
from selenium import webdriver
from selenium.webdriver.edge.service import Service
from webdriver_manager.microsoft import EdgeChromiumDriverManager

# Inicjalizacja usługi sterownika Edge
service = Service(EdgeChromiumDriverManager().install())

# Opcje przeglądarki (opcjonalnie, można je dostosować lub usunąć)
options = webdriver.EdgeOptions()
options.use_chromium = True  # Użyj Chromium, jeśli Twoja wersja Edge jest oparta na Chromium

# Utworzenie instancji przeglądarki Edge
driver = webdriver.Edge(service=service, options=options)

# Otworzenie strony (na przykład Google)
driver.get("http://www.google.com")

# Zakończenie pracy z przeglądarką po zakończeniu testów
# driver.quit()  # Odkomentuj, gdy chcesz zamknąć przeglądarkę automatycznie
```

W tym skrypcie użyto `webdriver_manager`, który automatycznie pobiera i ustawia najnowszą wersję sterownika dla przeglądarki, eliminując konieczność ręcznego zarządzania sterownikami. Możesz zainstalować `webdriver_manager` używając polecenia `pip install webdriver_manager`.

Pamiętaj, że Selenium wymaga, aby sterownik przeglądarki był kompatybilny z wersją przeglądarki, której używasz, więc upewnij się, że masz zainstalowaną odpowiednią wersję sterownika.

Zgromadziłem wyniki dla wszystkich podgrup w jednym DataFrame, gdzie dla każdego funduszu i każdej wartości `credit_spread_multiple` wypisano pierwszą wartość liczbową (lub '-') dla kolumn RDM. Oto skrypt, który użyłem do stworzenia tego DataFrame:

```python
all_rows = []
for fund, credit_spreads in first_numeric_rdm_by_subgroup.items():
    for credit_spread, rdm_values in credit_spreads.items():
        row = {'FUND': fund, 'Credit Spread': credit_spread}
        row.update({rdm_col: rdm_values[i] for i, rdm_col in enumerate(rdm_columns)})
        all_rows.append(row)

all_results_df = pd.DataFrame(all_rows)
```

Powyżej pokazane są pierwsze kilka wierszy wynikowego DataFrame jako przykład. Każdy wiersz reprezentuje unikalną kombinację funduszu i `credit_spread_multiple`, z odpowiednimi wartościami dla kolumn RDM.

Oto skrypt, który iteruje przez wszystkie podgrupy i wybiera pierwszą wartość liczbową z każdej kolumny RDM. Jeżeli nie ma wartości liczbowej, wstawia "-":

```python
first_numeric_rdm_by_subgroup = {}

for fund, credit_spreads in subgroups_by_fund_credit_spread.items():
    first_numeric_rdm_by_subgroup[fund] = {}
    for credit_spread, subgroup in credit_spreads.items():
        first_numeric_rdm_by_subgroup[fund][credit_spread] = []
        for rdm_col in rdm_columns:
            # Extract the first numeric value for the RDM column
            first_numeric_value = subgroup[rdm_col].apply(lambda x: x if isinstance(x, (int, float)) else None).dropna().head(1)
            first_numeric_rdm_by_subgroup[fund][credit_spread].append(first_numeric_value.iloc[0] if not first_numeric_value.empty else '-')

# Wynik jest słownikiem słowników, gdzie pierwszy klucz to fundusz, drugi to wartość credit_spread_multiple,
# a wartości to listy pierwszych wartości liczbowych lub '-' dla kolumn RDM.
```

Ten skrypt gromadzi dane w strukturze, która pozwala na ł
